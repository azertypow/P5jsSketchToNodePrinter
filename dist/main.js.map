{"version":3,"sources":["printFile.js","saveImageFromDataUri.js","server.js","main.js"],"names":["documentPath","arrayOfPrinters","printer","list","console","log","print","then","value","info","catch","reason","error","saveImageFromDataUri","dataUri","pathOfDirectory","absolutePathOfDirectory","__dirname","pathOfImage","base64Data","replace","fs","writeFile","err","Jimp","read","image","quality","write","PORT_CLIENT","app","http","nodeHttp","createServer","io","get","req","res","sendFile","use","express","static","listen","on","socket","main"],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["import printer from \"pdf-to-printer\"\n\n/**\n * send document to print\n * @param {String} documentPath - path of the document to print\n * */\nexport default async function(documentPath) {\n    const arrayOfPrinters = await printer.list()\n\n    console.log(arrayOfPrinters)\n    printer.print(documentPath, {\n        printer: arrayOfPrinters[0]\n    })\n        .then(value => {console.info(`printed!\\r\\n${value}`)})\n        .catch(reason => {console.error(reason)})\n}\n","import fs from \"fs\"\nimport Jimp from \"jimp\"\n\nexport function saveImageFromDataUri(dataUri, pathOfDirectory = \"/\") {\n\n    const absolutePathOfDirectory = __dirname + pathOfDirectory\n    const pathOfImage = absolutePathOfDirectory + \"out.png\"\n\n    // strip off the data: url prefix to get just the base64-encoded bytes\n    const base64Data = dataUri.replace(/^data:image\\/\\w+;base64,/, \"\")\n\n    fs.writeFile( pathOfImage, base64Data, 'base64', (err) => {\n        console.log(err)\n    })\n\n    Jimp.read(pathOfImage)\n        .then(image => {\n            return image\n                .quality(100)       // set quality\n                .write(absolutePathOfDirectory + 'out.bmp')   // save\n        })\n        .catch(err => {\n            console.error(err);\n        });\n}\n","import printFile from \"./printFile\"\n\nconst PORT_CLIENT = 8080\n\nimport express from \"express\"\nimport nodeHttp from \"http\"\nimport socketIo from \"socket.io\"\nimport {saveImageFromDataUri} from \"./saveImageFromDataUri\"\n\nexport default function() {\n\n    const app = express()\n    const http = nodeHttp.createServer(app)\n    const io = socketIo(http)\n\n    app.get('/', function(req, res){\n        res.sendFile(__dirname + '/client/index.html')\n    })\n\n    app.use('/public', express.static(__dirname + '/client/public'))\n\n    http.listen(PORT_CLIENT, () => {\n        console.log(`listening on *:${PORT_CLIENT}`)\n    })\n\n    io.on(\"connection\", (socket) => {\n        console.log(\"new connection\")\n\n        socket.on(\"printFromClient\", (dataUri) => {\n            console.log(dataUri)\n\n            saveImageFromDataUri(dataUri, '/documents/')\n\n            // printFile(dataUri).then(() => {\n            //     // action when printed file action was success\n            // })\n        })\n    })\n}\n","import server from \"./server\"\n\n/**\n * main function of node application\n * */\nasync function main() {\n    server()\n\n    return \"main file is running\"\n}\n\n// start process\nmain().then(console.info)\n"]}