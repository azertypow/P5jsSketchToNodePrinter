{"version":3,"sources":["printFile.js","saveImageFromDataUri.js","server.js","main.js"],"names":["documentPath","arrayOfPrinters","printer","list","console","log","print","then","value","info","catch","reason","error","saveImageFromDataUri","dataUri","pathOfDirectory","base64Data","replace","fs","writeFile","__dirname","err","PORT_CLIENT","app","http","nodeHttp","createServer","io","get","req","res","sendFile","use","express","static","listen","on","socket","main"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAIe,wBAAeA,YAAf,EAA6B;AACxC,QAAMC,eAAe,GAAG,MAAMC,sBAAQC,IAAR,EAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;;AACAC,wBAAQI,KAAR,CAAcN,YAAd,EAA4B;AACxBE,IAAAA,OAAO,EAAED,eAAe,CAAC,CAAD;AADA,GAA5B,EAGKM,IAHL,CAGUC,KAAK,IAAI;AAACJ,IAAAA,OAAO,CAACK,IAAR,CAAc,eAAcD,KAAM,EAAlC;AAAqC,GAHzD,EAIKE,KAJL,CAIWC,MAAM,IAAI;AAACP,IAAAA,OAAO,CAACQ,KAAR,CAAcD,MAAd;AAAsB,GAJ5C;AAKH;;;;;;;;;ACfD;;AACA;;;;AAEO,SAASE,oBAAT,CAA8BC,OAA9B,EAAuCC,eAAe,GAAG,GAAzD,EAA8D;AAEjE;AACA,QAAMC,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,0BAAhB,EAA4C,EAA5C,CAAnB;;AAEAC,cAAGC,SAAH,CAAaC,SAAS,GAAGL,eAAZ,GAA8B,SAA3C,EAAsDC,UAAtD,EAAkE,QAAlE,EAA6EK,GAAD,IAAS;AACjFjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACH,GAFD;AAGH;;;;;;;;;ACXD;;AAIA;;AACA;;AACA;;AACA;;;;AALA,MAAMC,WAAW,GAAG,IAApB;;AAOe,oBAAW;AAEtB,QAAMC,GAAG,GAAG,uBAAZ;;AACA,QAAMC,IAAI,GAAGC,cAASC,YAAT,CAAsBH,GAAtB,CAAb;;AACA,QAAMI,EAAE,GAAG,qBAASH,IAAT,CAAX;AAEAD,EAAAA,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC3BA,IAAAA,GAAG,CAACC,QAAJ,CAAaX,SAAS,GAAG,oBAAzB;AACH,GAFD;AAIAG,EAAAA,GAAG,CAACS,GAAJ,CAAQ,SAAR,EAAmBC,iBAAQC,MAAR,CAAed,SAAS,GAAG,gBAA3B,CAAnB;AAEAI,EAAAA,IAAI,CAACW,MAAL,CAAYb,WAAZ,EAAyB,MAAM;AAC3BlB,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBiB,WAAY,EAA1C;AACH,GAFD;AAIAK,EAAAA,EAAE,CAACS,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC5BjC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEAgC,IAAAA,MAAM,CAACD,EAAP,CAAU,iBAAV,EAA8BtB,OAAD,IAAa;AACtCV,MAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AAEA,sDAAqBA,OAArB,EAA8B,aAA9B,EAHsC,CAKtC;AACA;AACA;AACH,KARD;AASH,GAZD;AAaH;;;;ACtCD;;;;AAEA;;;AAGA,eAAewB,IAAf,GAAsB;AAClB;AAEA,SAAO,sBAAP;AACH,EAED;;;AACAA,IAAI,GAAG/B,IAAP,CAAYH,OAAO,CAACK,IAApB","file":"main.js","sourceRoot":"../src","sourcesContent":["import printer from \"pdf-to-printer\"\n\n/**\n * send document to print\n * @param {String} documentPath - path of the document to print\n * */\nexport default async function(documentPath) {\n    const arrayOfPrinters = await printer.list()\n\n    console.log(arrayOfPrinters)\n    printer.print(documentPath, {\n        printer: arrayOfPrinters[0]\n    })\n        .then(value => {console.info(`printed!\\r\\n${value}`)})\n        .catch(reason => {console.error(reason)})\n}\n","import fs from \"fs\"\nimport sys from \"sys\"\n\nexport function saveImageFromDataUri(dataUri, pathOfDirectory = \"/\") {\n\n    // strip off the data: url prefix to get just the base64-encoded bytes\n    const base64Data = dataUri.replace(/^data:image\\/\\w+;base64,/, \"\")\n\n    fs.writeFile(__dirname + pathOfDirectory + \"out.png\", base64Data, 'base64', (err) => {\n        console.log(err)\n    })\n}\n","import printFile from \"./printFile\"\n\nconst PORT_CLIENT = 8080\n\nimport express from \"express\"\nimport nodeHttp from \"http\"\nimport socketIo from \"socket.io\"\nimport {saveImageFromDataUri} from \"./saveImageFromDataUri\"\n\nexport default function() {\n\n    const app = express()\n    const http = nodeHttp.createServer(app)\n    const io = socketIo(http)\n\n    app.get('/', function(req, res){\n        res.sendFile(__dirname + '/client/index.html')\n    })\n\n    app.use('/public', express.static(__dirname + '/client/public'))\n\n    http.listen(PORT_CLIENT, () => {\n        console.log(`listening on *:${PORT_CLIENT}`)\n    })\n\n    io.on(\"connection\", (socket) => {\n        console.log(\"new connection\")\n\n        socket.on(\"printFromClient\", (dataUri) => {\n            console.log(dataUri)\n\n            saveImageFromDataUri(dataUri, '/documents/')\n\n            // printFile(dataUri).then(() => {\n            //     // action when printed file action was success\n            // })\n        })\n    })\n}\n","import server from \"./server\"\n\n/**\n * main function of node application\n * */\nasync function main() {\n    server()\n\n    return \"main file is running\"\n}\n\n// start process\nmain().then(console.info)\n"]}