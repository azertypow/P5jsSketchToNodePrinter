{"version":3,"sources":["printFile.js","server.js","main.js"],"names":["documentPath","arrayOfPrinters","printer","list","console","log","print","then","value","info","catch","reason","error","PORT_CLIENT","app","http","nodeHttp","createServer","io","get","req","res","sendFile","__dirname","use","express","static","listen","on","socket","filePath","main"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAIe,wBAAeA,YAAf,EAA6B;AACxC,QAAMC,eAAe,GAAG,MAAMC,sBAAQC,IAAR,EAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;;AACAC,wBAAQI,KAAR,CAAcN,YAAd,EAA4B;AACxBE,IAAAA,OAAO,EAAED,eAAe,CAAC,CAAD;AADA,GAA5B,EAGKM,IAHL,CAGUC,KAAK,IAAI;AAACJ,IAAAA,OAAO,CAACK,IAAR,CAAc,eAAcD,KAAM,EAAlC;AAAqC,GAHzD,EAIKE,KAJL,CAIWC,MAAM,IAAI;AAACP,IAAAA,OAAO,CAACQ,KAAR,CAAcD,MAAd;AAAsB,GAJ5C;AAKH;;;;;;;;;ACfD;;AAIA;;AACA;;AACA;;;;AAJA,MAAME,WAAW,GAAG,IAApB;;AAMe,oBAAW;AAEtB,QAAMC,GAAG,GAAG,uBAAZ;;AACA,QAAMC,IAAI,GAAGC,cAASC,YAAT,CAAsBH,GAAtB,CAAb;;AACA,QAAMI,EAAE,GAAG,qBAASH,IAAT,CAAX;AAEAD,EAAAA,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC3BA,IAAAA,GAAG,CAACC,QAAJ,CAAaC,SAAS,GAAG,oBAAzB;AACH,GAFD;AAIAT,EAAAA,GAAG,CAACU,GAAJ,CAAQ,SAAR,EAAmBC,iBAAQC,MAAR,CAAeH,SAAS,GAAG,gBAA3B,CAAnB;AAEAR,EAAAA,IAAI,CAACY,MAAL,CAAYd,WAAZ,EAAyB,MAAM;AAC3BT,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBQ,WAAY,EAA1C;AACH,GAFD;AAIAK,EAAAA,EAAE,CAACU,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC5BzB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEAwB,IAAAA,MAAM,CAACD,EAAP,CAAU,iBAAV,EAA8BE,QAAD,IAAc;AACvC1B,MAAAA,OAAO,CAACC,GAAR,CAAYyB,QAAZ;AACA,8BAAUA,QAAV,EAAoBvB,IAApB,CAAyB,MAAM;AAC3BH,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,OAFD;AAGH,KALD;AAMH,GATD;AAUH;;;;AClCD;;;;AAEA;;;AAGA,eAAe0B,IAAf,GAAsB;AAClB;AAEA,SAAO,sBAAP;AACH,EAED;;;AACAA,IAAI,GAAGxB,IAAP,CAAYH,OAAO,CAACK,IAApB","file":"main.js","sourceRoot":"../src","sourcesContent":["import printer from \"pdf-to-printer\"\n\n/**\n * send document to print\n * @param {String} documentPath - path of the document to print\n * */\nexport default async function(documentPath) {\n    const arrayOfPrinters = await printer.list()\n\n    console.log(arrayOfPrinters)\n    printer.print(documentPath, {\n        printer: arrayOfPrinters[0]\n    })\n        .then(value => {console.info(`printed!\\r\\n${value}`)})\n        .catch(reason => {console.error(reason)})\n}\n","import printFile from \"./printFile\"\n\nconst PORT_CLIENT = 8080\n\nimport express from \"express\"\nimport nodeHttp from \"http\"\nimport socketIo from \"socket.io\"\n\nexport default function() {\n\n    const app = express()\n    const http = nodeHttp.createServer(app)\n    const io = socketIo(http)\n\n    app.get('/', function(req, res){\n        res.sendFile(__dirname + '/client/index.html')\n    })\n\n    app.use('/public', express.static(__dirname + '/client/public'))\n\n    http.listen(PORT_CLIENT, () => {\n        console.log(`listening on *:${PORT_CLIENT}`)\n    })\n\n    io.on(\"connection\", (socket) => {\n        console.log(\"new connection\")\n\n        socket.on(\"printFromClient\", (filePath) => {\n            console.log(filePath)\n            printFile(filePath).then(() => {\n                console.log(\"file printed\")\n            })\n        })\n    })\n}\n","import server from \"./server\"\n\n/**\n * main function of node application\n * */\nasync function main() {\n    server()\n\n    return \"main file is running\"\n}\n\n// start process\nmain().then(console.info)\n"]}